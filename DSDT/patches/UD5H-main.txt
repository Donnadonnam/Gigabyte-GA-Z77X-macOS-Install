# Gigabyte GA-Z77X-UD5H DSDT Patch
# UD5H-main.txt
# Gigabyte GA-Z77X DSDT Patch Repo - http://git.io/vIatr
#
# Fixes various errors in the stock DSDT and makes it more compatible with OS X.
# Compatible with GA-Z77X-UD5H (F16g BIOS)
# Apply a graphics patch after using this and look at the README.
#
# Special thanks to Mieze, Piker-Alpha, PJALM, RampageDev, RehabMan, SJ_Underwater & toleda for their original edits; this would not have been possible if not for their work.

# 1. Fix errors/warnings in the stock DSDT

## 2368, 3128, ResourceTag larger than Field (Size mismatch, Tag: 64 bits, Field: 32 bits)
into method label _CRS parent_label PCI0 code_regex CreateDWordField\s\(BUF0,\s\\_SB.PCI0._Y0F._LEN,\sMSLN\) replace_matched begin CreateQWordField (BUF0, \\_SB.PCI0._Y0F._LEN, MSLN) end;

## 3553, 3130, Result is not used, possible operator timeout will be missed
into_all all code_regex (Acquire\s\(MUT0,\s0x)....\) replace_matched begin %1FFFF) end;

## 2011, Use of compiler reserved name (_T_0)
into_all all code_regex _T_([0-6]) replaceall_matched begin T_%1 end;

## 8879, 2120, Control Method should be made Serialized (due to creation of named objects within)
into method label UXDV code_regex ([\s\S]*) store_%8;
into method label UXDV remove_entry;
into definitionblock code_regex . insert begin Method (UXDV, 1, Serialized)\n{\n\n} end;
into method label UXDV code_regex .* replace_matched begin %8 end;

## 8941, 2120, Control Method should be made Serialized (due to creation of named objects within)
into method label RRIO code_regex ([\s\S]*) store_%8;
into method label RRIO remove_entry;
into definitionblock code_regex . insert begin Method (RRIO, 4, Serialized)\n{\n\n} end;
into method label RRIO code_regex .* replace_matched begin %8 end;

## 9269, 2120, Control Method should be made Serialized (due to creation of named objects within)
into method label _DOD parent_label GFX0 code_regex ([\s\S]*) store_%8;
into method label _DOD parent_label GFX0 remove_entry;
into device label GFX0 insert begin Method (_DOD, 0, Serialized)\n{\n\n} end;
into method label _DOD parent_label GFX0 code_regex .* replace_matched begin %8 end;

## 10704, 6035, _HID suffix must be all hex digits (GH)
into_all all code_regex (Name\s\(_HID,\s"ABCDEFGH") replace_matched begin Name (_HID, EisaId ("PNP0C15") end;

## Fix IRQs (RehabMan)
into device name_hid PNP0000 code_regex IRQNoFlags\s\(\)\n\s+\{(\d+)\} remove_matched;
into device name_hid PNP0100 code_regex IRQNoFlags\s\(\)\n\s+\{(\d+)\} remove_matched;
into device name_hid PNP0B00 code_regex IRQNoFlags\s\(\)\n\s+\{(\d+)\} remove_matched;
into device name_hid PNP0103 code_regex IRQNoFlags\s\(\)\n\s+\{.*\} removeall_matched;
into device name_hid PNP0103 code_regex Name\s\(([^,]+),\sResourceTemplate\s\(\).*\n\s+\{((?:.|\n)*)\}\) replace_matched
begin
Name (%1, ResourceTemplate()\n
{\n
    IRQNoFlags() { 0, 8, 11, 15 }\n
%2
})\n
end;

## Remove Device (CWDT)
into device label CWDT parent_label LPCB remove_entry;

## Remove Device (RMSC)
into device label RMSC parent_label LPCB remove_entry;

## Remove Device (SIO1) and related methods
into device label SIO1 parent_label LPCB remove_entry;
into method label SIOS parent_label LPCB remove_entry;
into method label SIOW parent_label LPCB remove_entry;
into method label PTS code_regex \\_SB.PCI0.LPCB.SIOS\s\(Arg0\) remove_matched;
into method label WAK code_regex \\_SB.PCI0.LPCB.SIOW\s\(Arg0\) remove_matched;

## Remove Device (WMI1)
into device label WMI1 parent_label _SB.PCI0 remove_entry;

## Remove IDE Controller Devices
into device label MVL1 parent_label RP05 remove_entry;
into device label MVL2 parent_label RP05 remove_entry;
into device label MVL3 parent_label PEG2 remove_entry;
into device label MVL4 parent_label PEG2 remove_entry;

## Remove PS2 Devices and related methods (no PS2 port present)
into device label PS2K parent_label LPCB remove_entry;
into device label PS2M parent_label LPCB remove_entry;
into method label SIOH parent_label _SB.PCI0.LPCB remove_entry;
into method label PS2M._PRW parent_label LPCB remove_entry;
into method label PS2K._PRW parent_label LPCB remove_entry;
into method label _L1D parent_label \_GPE code_regex \\_SB\.PCI0\.LPCB\.SIOH\s+\(\) remove_matched;

## Remove TPM Devices
into device label TPMX remove_entry;
into device label _SB.PCI0.ITPM remove_entry;
into device label _SB.PCI0.LPCB.TPM remove_entry;
into scope label _SB.PCI0.LPCB.TPM remove_entry;

## Remove ThermalZone Scope
into scope label _TZ remove_entry;
into_all method code_regex Notify\s+\(\\_TZ.* removeall_matched;

## Remove Universal Host Controller Devices (USB 1.1) and related methods
into device label USB1 remove_entry;
into device label USB2 remove_entry;
into device label USB3 remove_entry;
into device label USB4 remove_entry;
into device label USB5 remove_entry;
into device label USB6 remove_entry;
into device label USB7 remove_entry;
into_all all code_regex USB([1-7]) remove_entry;

# 2. Rename devices to Apple device names

## Device (COPR) → Device (MATH) // Math Coprocessor
into device label COPR set_label begin MATH end;
into_all all code_regex COPR replaceall_matched begin MATH end;

## Device (H_EC) → Device (EC) // Embedded Controller
into device label H_EC set_label begin EC end;
into scope label H_EC set_label begin EC end;
into_all all code_regex H_EC replaceall_matched begin EC end;

## Device (GFX0) → Device (IGPU) // Integrated Graphics
into_all all code_regex GFX0\. replaceall_matched begin IGPU. end;
into_all all code_regex \.GFX0 replaceall_matched begin .IGPU end;
into_all all code_regex \sGFX0, replaceall_matched begin IGPU, end;
into_all all code_regex \(GFX0 replaceall_matched begin (IGPU end;
into_all all label GFX0 set_label begin IGPU end;
into_all all label _SB.PCI0.GFX0 set_label begin _SB.PCI0.IGPU end;
into_all all label \_SB.PCI0.GFX0 set_label begin \_SB.PCI0.IGPU end;
into_all all label _SB.PCI0.GFX0.DD02 set_label begin _SB.PCI0.IGPU.DD02 end;
into_all all label \_SB.PCI0.GFX0.DD02 set_label begin \_SB.PCI0.IGPU.DD02 end;
into_all all label ^^GFX0 set_label begin ^^IGPU end;
into_all all label ^GFX0 set_label begin ^IGPU end;

## Device (GLAN) → Device (ETH0) // Gigabit Ethernet Controller (Intel 82579V)
into device label GLAN set_label begin ETH0 end;
into_all all code_regex GLAN replaceall_matched begin ETH0 end;

## Device (PXSX) [RP02] → Device (SATA) // SATA Controller (Marvell 88SE9172)
into device label PXSX parent_label RP02 set_label begin SATA end;
into method label HPME parent_label RP02 code_regex PXSX replaceall_matched begin SATA end;

## Device (PXSX) [RP05] → Device (ARPT) // AirPort (WiFi + Bluetooth)
into device label PXSX parent_label RP05 set_label begin ARPT end;
into method label HPME parent_label RP05 code_regex PXSX replaceall_matched begin ARPT end;

## Device (PXSX) [RP06] → Device (FRWR) // FireWire Host Controller
into device label PXSX parent_label RP06 set_label begin FRWR end;
into method label HPME parent_label RP06 code_regex PXSX replaceall_matched begin FRWR end;

## Device (PXSX) [RP07] → Device (ETH1) // Gigabit Ethernet Controller (Qualcomm Atheros AR8161)
into device label PXSX parent_label RP07 set_label begin ETH1 end;
into method label HPME parent_label RP07 code_regex PXSX replaceall_matched begin ETH1 end;

## Device (PXSX) [RP08] → Device (SATA) // SATA Controller (Marvell 88SE9172)
into device label PXSX parent_label RP08 set_label begin SATA end;
into method label HPME parent_label RP08 code_regex PXSX replaceall_matched begin SATA end;

## Device (SAT0) Device (SAT1) → Device (SATA) // SATA Controller (Intel 7-Series)
into device label SAT0 set_label begin SATA end;
into_all all code_regex SAT0 replaceall_matched begin SATA end;
into device label SAT1 remove_entry;

## Device (XHC) → Device (XHC1) // eXtensible Host Controller (USB 3.0)
into device label XHC set_label begin XHC1 end;
into_all all code_regex \^XHC\. replaceall_matched begin \^XHC1\. end;
into_all all code_regex \.XHC replaceall_matched begin \.XHC1 end;

# 3. Add missing Apple devices

## Add Darwin as a supported OS
into method label _INI code_regex \{(\s+)(If\s\(_OSI\s\("Windows\s2001"\)\)) replace_matched begin  {\n
						If (_OSI ("Darwin"))\n
						{\n
							Store (0x2710, OSYS)\n
						}\n
\n
						$2
end;


## Device (MCHC) // Memory Controller Hub
into device label MCHC parent_label PCI0 remove_entry;
into device label PCI0 insert begin
Device (MCHC)\n
{\n
	Name (_ADR, Zero)\n
}\n
end;

## Device (SBUS) // System Management Bus - Needed to load AppleSMBusController.kext
into device label BUS0 parent_label SBUS remove_entry;
into device label BUS1 parent_label SBUS remove_entry;
into device label SBUS insert begin
Device (BUS0)\n
{\n
	Name (_CID, "smbus")\n
	Name (_ADR, Zero)\n
	Device (DVL0)\n
	{\n
		Name (_ADR, 0x57)\n
		Name (_CID, "diagsvault")\n
		Method (_DSM, 4, NotSerialized)\n
		{\n
			If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
			Return (Package() { "address", 0x57 })\n
		}\n
	}\n
}\n
end;

# 4. Inject device properties into existing devices

## Device (EHC1) // Enhanced Host Controller (USB 2.0) - Increases power output for USB 2.0 ports
into method label _DSM parent_label EHC1 remove_entry;
into device label EHC1 insert begin
Method (_DSM, 4, NotSerialized)\n
{\n
	If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	Return (Package () {\n
		"AAPL,clock-id", Buffer() { 0x01 },\n
		"built-in", Buffer() { 0x00 },\n
		"subsystem-id", Buffer() { 0x70, 0x72, 0x00, 0x00 },\n
		"subsystem-vendor-id", Buffer() { 0x86, 0x80, 0x00, 0x00 },\n
		"AAPL,current-available", 2100,\n
		"AAPL,current-extra", 2200,\n
		"AAPL,current-extra-in-sleep", 1600,\n
		"AAPL,device-internal", 0x02,\n
		"AAPL,max-port-current-in-sleep", 2100\n
	})\n
}\n
end;

## Device (EHC2) // Enhanced Host Controller (USB 2.0) - Increases power output for USB 2.0 ports
into method label _DSM parent_label EHC2 remove_entry;
into device label EHC2 insert begin
Method (_DSM, 4, NotSerialized)\n
{\n
	If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	Return (Package () {\n
		"AAPL,clock-id", Buffer() { 0x01},\n
		"built-in", Buffer() { 0x00},\n
		"subsystem-id", Buffer() { 0x70, 0x72, 0x00, 0x00 },\n
		"subsystem-vendor-id", Buffer() { 0x86, 0x80, 0x00, 0x00 },\n
		"AAPL,current-available", 2100,\n
		"AAPL,current-extra", 2200,\n
		"AAPL,current-extra-in-sleep", 1600,\n
		"AAPL,device-internal", 0x02,\n
		"AAPL,max-port-current-in-sleep", 2100\n
	})\n
}\n
end;

## Device (ETH0) // Gigabit Ethernet Controller (Intel 82579V)
into method label _DSM parent_label ETH0 remove_entry;
into device label ETH0 insert begin
Method (_DSM, 4, NotSerialized)\n
{\n
	If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	Return (Package () {\n
		"built-in", Buffer() { "0x01" },\n
		"device_type", Buffer() { "Ethernet Controller" },\n
		"location", Buffer() { "1" }\n
	})\n
}\n
end;

## Device (ETH1) // Gigabit Ethernet Controller (Qualcomm Atheros AR8161)
into method label _DSM parent_label ETH1 remove_entry;
into device label ETH1 insert begin
Method (_DSM, 4, NotSerialized)\n
{\n
	If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	Return (Package () {\n
		"built-in", Buffer() { "0x01" },\n
		"device_type", Buffer() { "Ethernet Controller" },\n
		"location", Buffer() { "2" }\n
	})\n
}\n
end;

## Device (HDEF) // High Definition Audio - Needed to enable audio for Realtek ALC898
into method label _DSM parent_label HDEF remove_entry;
into device label HDEF insert begin
Method (_DSM, 4, NotSerialized)\n
{\n
	If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	Return (Package () {\n
		"layout-id", Buffer() { 0x03, 0x00, 0x00, 0x00 },\n
		"hda-gfx", Buffer() { "onboard-1" },\n
		"PinConfigurations", Buffer(Zero) {}\n
	})\n
}\n
end;

# 5. Fix 7-Series USB 3.0 Multiplexing
# Maintained by: RehabMan for: Laptop Patches
# usb_7-series-multiplex.txt

# Originally Maintained by: PJALM for: PJALM Intel7 at: Thu Aug 15 09:07:46 UTC 2013
# Intel Z77 USB2/USB3 Multiplexing Fix
# USB3 patches in thanks to SJ_Underwater and Mieze
# Code optimizations thanks to RehabMan and PikeRAlpha

# Further optimizations by RehabMan 2013-10-14
# Some modifications by shinzon for Acer Aspire laptops

#
# Note: These patches are often not universal.  If your DSDT is substantially
# different, you may need to tweak them or refer to the various
# guides for XHC patching to implement it correctly for your
# board.
#

## Fix method _OSC
into method label _OSC parent_label PCI0 remove_entry;
into device label PCI0 parent_label _SB insert
begin
Method (_OSC, 4, Serialized)\n
{\n
	Store (Arg3, Local0)\n
	CreateDWordField (Local0, Zero, CDW1)\n
	CreateDWordField (Local0, 0x08, CDW2)\n
	//was: Store (CDW2, SUPP)\n
	Store (CDW2, Local3) //was: Store (CDW2, CTRL))\n
	If (LAnd (LEqual (Arg0, GUID), NEXP))\n
	{\n
		If (Not (And (CDW1, One)))\n
		{\n
			If (And (Local3, 0x02)) //was: And (CTRL, 0x02)\n
			{\n
				NHPG ()\n
			}\n
			If (And (Local3, 0x04)) //was: And (CTRL, 0x04)\n
			{\n
				NPME ()\n
			}\n
		}\n
		If (LNotEqual (Arg1, One))\n
		{\n
			Or (CDW1, 0x08, CDW1)\n
		}\n
		If (LNotEqual (CDW2, Local3)) //was: LNotEqual (CDW2, CTRL)\n
		{\n
			Or (CDW1, 0x10, CDW1)\n
		}\n
		Store (Local3, CDW2) //was: Store(CTRL, CDW2)\n
		Store (Local3, OSCC) //was: Store(CTRL, OSCC)\n
	}\n
	Else\n
	{\n
		Or (CDW1, 0x04, CDW1)\n
	}\n
	Return (Local0)\n
}\n
end;

## Fix EHC1
into device label PR11 code_regex Name\s\(MUXS[^)]+\) remove_matched;
into device label PR11 parent_label PR01 insert begin Name (MUXS, "XHCA") end;
into device label PR12 code_regex Name\s\(MUXS[^)]+\) remove_matched;
into device label PR12 parent_label PR01 insert begin Name (MUXS, "XHCB") end;
into device label PR13 code_regex Name\s\(MUXS[^)]+\) remove_matched;
into device label PR13 parent_label PR01 insert begin Name (MUXS, "XHCC") end;
into device label PR18 code_regex Name\s\(MUXS[^)]+\) remove_matched;
into device label PR18 parent_label PR01 insert begin Name (MUXS, "XHCD") end;

into method label XHCA parent_label EHC1 remove_entry;
into method label XHCB parent_label EHC1 remove_entry;
into method label XHCC parent_label EHC1 remove_entry;
into method label XHCD parent_label EHC1 remove_entry;
into method label EHCA parent_label EHC1 remove_entry;
into method label EHCB parent_label EHC1 remove_entry;
into method label EHCC parent_label EHC1 remove_entry;
into method label EHCD parent_label EHC1 remove_entry;
into method label XHCN parent_label EHC1 remove_entry;
into device label EHC1 code_regex Name\s\(XHCN,\sOne\) remove_matched;

into device label EHC1 insert begin
Name (XHCN, One)\n
Method (XHCA, 0, NotSerialized) { Store (1, ^^XHC1.PAHC) }\n
Method (XHCB, 0, NotSerialized) { Store (1, ^^XHC1.PBHC) }\n
Method (XHCC, 0, NotSerialized) { Store (1, ^^XHC1.PCHC) }\n
Method (XHCD, 0, NotSerialized) { Store (1, ^^XHC1.PDHC) }\n
Method (EHCA, 0, NotSerialized) { Store (0, ^^XHC1.PAHC) }\n
Method (EHCB, 0, NotSerialized) { Store (0, ^^XHC1.PBHC) }\n
Method (EHCC, 0, NotSerialized) { Store (0, ^^XHC1.PCHC) }\n
Method (EHCD, 0, NotSerialized) { Store (0, ^^XHC1.PDHC) }\n
end;

## Fix EHC2
into method label XHCN parent_label EHC2 remove_entry;
into device label EHC2 code_regex Name\s\(XHCN,\sOne\) remove_matched;
into device label EHC2 insert begin Name (XHCN, One)\n end;

## Fix XHC1
into device label XHC set_label begin XHC1 end;
into_all all code_regex XHC(?=\W) replaceall_matched begin XHC1 end;
into method label _WAK code_regex \_SB.PCI0.XHC1.XWAK replace_matched begin _SB.PCI0.XHC1._INI end;

## Rewrite XHC/XHC1 device
into device label XHC1 replace_content
begin
Name (_ADR, 0x00140000)\n
Name (_S3D, 0x02)\n
Name (_S4D, 0x02)\n
Name (XRST, Zero)\n
\n
OperationRegion (XPRT, PCI_Config, 0x74, 0x10)\n
Field (XPRT, DWordAcc, NoLock, Preserve)\n
{\n
	Offset (0x01),\n
	PMEE,   1,\n
		,   6,\n
	PMES,   1\n
}\n
\n
OperationRegion (XH1C, PCI_Config, 0xD0, 0x10)\n
Field (XH1C, ByteAcc, NoLock, Preserve)\n
{\n
	PAHC,   1,\n
	PBHC,   1,\n
	PCHC,   1,\n
	PDHC,   1,\n
	Offset (0x08),\n
	PASS,   1,\n
	PBSS,   1,\n
	PCSS,   1,\n
	PDSS,   1\n
}\n
\n
OperationRegion (XHC2, PCI_Config, 0x44, 0x04)\n
Field (XHC2, ByteAcc, NoLock, Preserve)\n
{\n
	Offset (0x01),\n
	MIAI,   2\n
}\n
\n
Method (_INI, 0, NotSerialized)\n
{\n
	Store (Zero, MIAI)\n
}\n
\n
Device (RHUB)\n
{\n
	Name (_ADR, Zero)\n
	Name (UPCP, Package() { 0xFF, 0x03, Zero, Zero })\n
	Device (PRT1)\n
	{\n
		Name (_ADR, One)\n
		Alias (UPCP, _UPC)\n
		Name (_PLD, Package()\n
		{\n
			Buffer()\n
			{\n
				0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,\n
				0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00\n
			}\n
		})\n
		Name (MUXS, "EHCA")\n
	}\n
	Device (PRT2)\n
	{\n
		Name (_ADR, 0x02)\n
		Alias (UPCP, _UPC)\n
		Name (_PLD, Package()\n
		{\n
			Buffer()\n
			{\n
				0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,\n
				0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00\n
			}\n
		})\n
		Name (MUXS, "EHCB")\n
	}\n
	Device (PRT3)\n
	{\n
		Name (_ADR, 0x03)\n
		Alias (UPCP, _UPC)\n
		Name (_PLD, Package()\n
		{\n
			Buffer()\n
			{\n
				0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,\n
				0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00\n
			}\n
		})\n
		Name (MUXS, "EHCC")\n
	}\n
	Device (PRT4)\n
	{\n
		Name (_ADR, 0x04)\n
		Alias (UPCP, _UPC)\n
		Name (_PLD, Package()\n
		{\n
			Buffer()\n
			{\n
				0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,\n
				0x69, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00\n
			}\n
		})\n
		Name (MUXS, "EHCD")\n
	}\n
}\n
\n
Method (_DSM, 4, NotSerialized)\n
{\n
	If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	Return (Package()\n
	{\n
		"AAPL,clock-id", Buffer() { 0x02 },\n
		"built-in", Buffer() { 0x00 },\n
		"subsystem-id", Buffer() { 0x70, 0x72, 0x00, 0x00 },\n
		"subsystem-vendor-id", Buffer() { 0x86, 0x80, 0x00, 0x00 },\n
		"AAPL,current-available", 2100,\n
		"AAPL,current-extra", 2200,\n
		"AAPL,current-extra-in-sleep", 1600,\n
		"AAPL,device-internal", 0x02,\n
		"AAPL,max-port-current-in-sleep", 2100,\n
	})\n
}\n
\n
Method (_PRW, 0, NotSerialized) { Return (GPRW (0x0D, 0x04)) }\n
Method (XHCA, 0, NotSerialized) { Store (One, PAHC) }\n
Method (XHCB, 0, NotSerialized) { Store (One, PBHC) }\n
Method (XHCC, 0, NotSerialized) { Store (One, PCHC) }\n
Method (XHCD, 0, NotSerialized) { Store (One, PDHC) }\n
Method (EHCA, 0, NotSerialized) { Store (Zero, PAHC) }\n
Method (EHCB, 0, NotSerialized) { Store (Zero, PBHC) }\n
Method (EHCC, 0, NotSerialized) { Store (Zero, PCHC) }\n
Method (EHCD, 0, NotSerialized) { Store (Zero, PDHC) }\n
end;
